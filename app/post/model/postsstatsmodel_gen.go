// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	postsStatsFieldNames          = builder.RawFieldNames(&PostsStats{})
	postsStatsRows                = strings.Join(postsStatsFieldNames, ",")
	postsStatsRowsExpectAutoSet   = strings.Join(stringx.Remove(postsStatsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	postsStatsRowsWithPlaceHolder = strings.Join(stringx.Remove(postsStatsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cachePostsStatsIdPrefix     = "cache:postsStats:id:"
	cachePostsStatsPostIdPrefix = "cache:postsStats:postId:"
)

type (
	postsStatsModel interface {
		Insert(ctx context.Context, data *PostsStats) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PostsStats, error)
		FindOneByPostId(ctx context.Context, postId int64) (*PostsStats, error)
		Update(ctx context.Context, data *PostsStats) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPostsStatsModel struct {
		sqlc.CachedConn
		table string
	}

	PostsStats struct {
		Id          int64     `db:"id"`           // 记录ID
		PostId      int64     `db:"post_id"`      // 帖子ID
		Upvotes     int64     `db:"upvotes"`      // 点赞数
		Downvotes   int64     `db:"downvotes"`    // 点踩数
		CreateTime  time.Time `db:"create_time"`  // 创建时间
		UpdatedTime time.Time `db:"updated_time"` // 更新时间
	}
)

func newPostsStatsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPostsStatsModel {
	return &defaultPostsStatsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`posts_stats`",
	}
}

func (m *defaultPostsStatsModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	postsStatsIdKey := fmt.Sprintf("%s%v", cachePostsStatsIdPrefix, id)
	postsStatsPostIdKey := fmt.Sprintf("%s%v", cachePostsStatsPostIdPrefix, data.PostId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, postsStatsIdKey, postsStatsPostIdKey)
	return err
}

func (m *defaultPostsStatsModel) FindOne(ctx context.Context, id int64) (*PostsStats, error) {
	postsStatsIdKey := fmt.Sprintf("%s%v", cachePostsStatsIdPrefix, id)
	var resp PostsStats
	err := m.QueryRowCtx(ctx, &resp, postsStatsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", postsStatsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPostsStatsModel) FindOneByPostId(ctx context.Context, postId int64) (*PostsStats, error) {
	postsStatsPostIdKey := fmt.Sprintf("%s%v", cachePostsStatsPostIdPrefix, postId)
	var resp PostsStats
	err := m.QueryRowIndexCtx(ctx, &resp, postsStatsPostIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `post_id` = ? limit 1", postsStatsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, postId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPostsStatsModel) Insert(ctx context.Context, data *PostsStats) (sql.Result, error) {
	postsStatsIdKey := fmt.Sprintf("%s%v", cachePostsStatsIdPrefix, data.Id)
	postsStatsPostIdKey := fmt.Sprintf("%s%v", cachePostsStatsPostIdPrefix, data.PostId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, postsStatsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.PostId, data.Upvotes, data.Downvotes, data.UpdatedTime)
	}, postsStatsIdKey, postsStatsPostIdKey)
	return ret, err
}

func (m *defaultPostsStatsModel) Update(ctx context.Context, newData *PostsStats) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	postsStatsIdKey := fmt.Sprintf("%s%v", cachePostsStatsIdPrefix, data.Id)
	postsStatsPostIdKey := fmt.Sprintf("%s%v", cachePostsStatsPostIdPrefix, data.PostId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, postsStatsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.PostId, newData.Upvotes, newData.Downvotes, newData.UpdatedTime, newData.Id)
	}, postsStatsIdKey, postsStatsPostIdKey)
	return err
}

func (m *defaultPostsStatsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePostsStatsIdPrefix, primary)
}

func (m *defaultPostsStatsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", postsStatsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPostsStatsModel) tableName() string {
	return m.table
}
