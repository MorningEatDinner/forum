// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: app/community/rpc/pb/community.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommunityService_GetAllCommunities_FullMethodName   = "/community.v1.CommunityService/GetAllCommunities"
	CommunityService_GetCommunityDetails_FullMethodName = "/community.v1.CommunityService/GetCommunityDetails"
	CommunityService_GetCommunityPosts_FullMethodName   = "/community.v1.CommunityService/GetCommunityPosts"
	CommunityService_UpdateCommunity_FullMethodName     = "/community.v1.CommunityService/UpdateCommunity"
	CommunityService_CreateCommunity_FullMethodName     = "/community.v1.CommunityService/CreateCommunity"
)

// CommunityServiceClient is the client API for CommunityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Community Service Definition
type CommunityServiceClient interface {
	// Public endpoints
	GetAllCommunities(ctx context.Context, in *GetAllCommunitiesRequest, opts ...grpc.CallOption) (*GetAllCommunitiesResponse, error)
	GetCommunityDetails(ctx context.Context, in *GetCommunityDetailsRequest, opts ...grpc.CallOption) (*GetCommunityDetailsResponse, error)
	GetCommunityPosts(ctx context.Context, in *GetCommunityPostsRequest, opts ...grpc.CallOption) (*GetCommunityPostsResponse, error)
	// Admin endpoints
	UpdateCommunity(ctx context.Context, in *UpdateCommunityRequest, opts ...grpc.CallOption) (*UpdateCommunityResponse, error)
	CreateCommunity(ctx context.Context, in *CreateCommunityRequest, opts ...grpc.CallOption) (*CreateCommunityResponse, error)
}

type communityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunityServiceClient(cc grpc.ClientConnInterface) CommunityServiceClient {
	return &communityServiceClient{cc}
}

func (c *communityServiceClient) GetAllCommunities(ctx context.Context, in *GetAllCommunitiesRequest, opts ...grpc.CallOption) (*GetAllCommunitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllCommunitiesResponse)
	err := c.cc.Invoke(ctx, CommunityService_GetAllCommunities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) GetCommunityDetails(ctx context.Context, in *GetCommunityDetailsRequest, opts ...grpc.CallOption) (*GetCommunityDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommunityDetailsResponse)
	err := c.cc.Invoke(ctx, CommunityService_GetCommunityDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) GetCommunityPosts(ctx context.Context, in *GetCommunityPostsRequest, opts ...grpc.CallOption) (*GetCommunityPostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommunityPostsResponse)
	err := c.cc.Invoke(ctx, CommunityService_GetCommunityPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) UpdateCommunity(ctx context.Context, in *UpdateCommunityRequest, opts ...grpc.CallOption) (*UpdateCommunityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCommunityResponse)
	err := c.cc.Invoke(ctx, CommunityService_UpdateCommunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) CreateCommunity(ctx context.Context, in *CreateCommunityRequest, opts ...grpc.CallOption) (*CreateCommunityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCommunityResponse)
	err := c.cc.Invoke(ctx, CommunityService_CreateCommunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunityServiceServer is the server API for CommunityService service.
// All implementations must embed UnimplementedCommunityServiceServer
// for forward compatibility.
//
// Community Service Definition
type CommunityServiceServer interface {
	// Public endpoints
	GetAllCommunities(context.Context, *GetAllCommunitiesRequest) (*GetAllCommunitiesResponse, error)
	GetCommunityDetails(context.Context, *GetCommunityDetailsRequest) (*GetCommunityDetailsResponse, error)
	GetCommunityPosts(context.Context, *GetCommunityPostsRequest) (*GetCommunityPostsResponse, error)
	// Admin endpoints
	UpdateCommunity(context.Context, *UpdateCommunityRequest) (*UpdateCommunityResponse, error)
	CreateCommunity(context.Context, *CreateCommunityRequest) (*CreateCommunityResponse, error)
	mustEmbedUnimplementedCommunityServiceServer()
}

// UnimplementedCommunityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommunityServiceServer struct{}

func (UnimplementedCommunityServiceServer) GetAllCommunities(context.Context, *GetAllCommunitiesRequest) (*GetAllCommunitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCommunities not implemented")
}
func (UnimplementedCommunityServiceServer) GetCommunityDetails(context.Context, *GetCommunityDetailsRequest) (*GetCommunityDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityDetails not implemented")
}
func (UnimplementedCommunityServiceServer) GetCommunityPosts(context.Context, *GetCommunityPostsRequest) (*GetCommunityPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityPosts not implemented")
}
func (UnimplementedCommunityServiceServer) UpdateCommunity(context.Context, *UpdateCommunityRequest) (*UpdateCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommunity not implemented")
}
func (UnimplementedCommunityServiceServer) CreateCommunity(context.Context, *CreateCommunityRequest) (*CreateCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommunity not implemented")
}
func (UnimplementedCommunityServiceServer) mustEmbedUnimplementedCommunityServiceServer() {}
func (UnimplementedCommunityServiceServer) testEmbeddedByValue()                          {}

// UnsafeCommunityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunityServiceServer will
// result in compilation errors.
type UnsafeCommunityServiceServer interface {
	mustEmbedUnimplementedCommunityServiceServer()
}

func RegisterCommunityServiceServer(s grpc.ServiceRegistrar, srv CommunityServiceServer) {
	// If the following call pancis, it indicates UnimplementedCommunityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommunityService_ServiceDesc, srv)
}

func _CommunityService_GetAllCommunities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCommunitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).GetAllCommunities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_GetAllCommunities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).GetAllCommunities(ctx, req.(*GetAllCommunitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_GetCommunityDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).GetCommunityDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_GetCommunityDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).GetCommunityDetails(ctx, req.(*GetCommunityDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_GetCommunityPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).GetCommunityPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_GetCommunityPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).GetCommunityPosts(ctx, req.(*GetCommunityPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_UpdateCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).UpdateCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_UpdateCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).UpdateCommunity(ctx, req.(*UpdateCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_CreateCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).CreateCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_CreateCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).CreateCommunity(ctx, req.(*CreateCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommunityService_ServiceDesc is the grpc.ServiceDesc for CommunityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommunityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "community.v1.CommunityService",
	HandlerType: (*CommunityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllCommunities",
			Handler:    _CommunityService_GetAllCommunities_Handler,
		},
		{
			MethodName: "GetCommunityDetails",
			Handler:    _CommunityService_GetCommunityDetails_Handler,
		},
		{
			MethodName: "GetCommunityPosts",
			Handler:    _CommunityService_GetCommunityPosts_Handler,
		},
		{
			MethodName: "UpdateCommunity",
			Handler:    _CommunityService_UpdateCommunity_Handler,
		},
		{
			MethodName: "CreateCommunity",
			Handler:    _CommunityService_CreateCommunity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/community/rpc/pb/community.proto",
}
