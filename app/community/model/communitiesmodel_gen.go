// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	communitiesFieldNames          = builder.RawFieldNames(&Communities{})
	communitiesRows                = strings.Join(communitiesFieldNames, ",")
	communitiesRowsExpectAutoSet   = strings.Join(stringx.Remove(communitiesFieldNames, "`community_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	communitiesRowsWithPlaceHolder = strings.Join(stringx.Remove(communitiesFieldNames, "`community_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCommunitiesCommunityIdPrefix   = "cache:communities:communityId:"
	cacheCommunitiesCommunityNamePrefix = "cache:communities:communityName:"
)

type (
	communitiesModel interface {
		Insert(ctx context.Context, data *Communities) (sql.Result, error)
		FindOne(ctx context.Context, communityId uint64) (*Communities, error)
		FindOneByCommunityName(ctx context.Context, communityName string) (*Communities, error)
		Update(ctx context.Context, data *Communities) error
		Delete(ctx context.Context, communityId uint64) error
		GetCommunityList(ctx context.Context, page int32, pageSize int32) ([]*Communities, error) 
		Count(ctx context.Context) (int64, error)	
	
	}


	defaultCommunitiesModel struct {
		sqlc.CachedConn
		table string
	}

	Communities struct {
		CommunityId   uint64         `db:"community_id"`   // 社区ID
		CommunityName string         `db:"community_name"` // 社区名称
		Introduction  sql.NullString `db:"introduction"`   // 社区介绍
		CreateTime    time.Time      `db:"create_time"`    // 创建时间
		UpdatedTime   time.Time      `db:"updated_time"`   // 更新时间
	}
)

func newCommunitiesModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCommunitiesModel {
	return &defaultCommunitiesModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`communities`",
	}
}

func (m *defaultCommunitiesModel) Delete(ctx context.Context, communityId uint64) error {
	data, err := m.FindOne(ctx, communityId)
	if err != nil {
		return err
	}

	communitiesCommunityIdKey := fmt.Sprintf("%s%v", cacheCommunitiesCommunityIdPrefix, communityId)
	communitiesCommunityNameKey := fmt.Sprintf("%s%v", cacheCommunitiesCommunityNamePrefix, data.CommunityName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `community_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, communityId)
	}, communitiesCommunityIdKey, communitiesCommunityNameKey)
	return err
}

func (m *defaultCommunitiesModel) FindOne(ctx context.Context, communityId uint64) (*Communities, error) {
	communitiesCommunityIdKey := fmt.Sprintf("%s%v", cacheCommunitiesCommunityIdPrefix, communityId)
	var resp Communities
	err := m.QueryRowCtx(ctx, &resp, communitiesCommunityIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `community_id` = ? limit 1", communitiesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, communityId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommunitiesModel) FindOneByCommunityName(ctx context.Context, communityName string) (*Communities, error) {
	communitiesCommunityNameKey := fmt.Sprintf("%s%v", cacheCommunitiesCommunityNamePrefix, communityName)
	var resp Communities
	err := m.QueryRowIndexCtx(ctx, &resp, communitiesCommunityNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `community_name` = ? limit 1", communitiesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, communityName); err != nil {
			return nil, err
		}
		return resp.CommunityId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommunitiesModel) Insert(ctx context.Context, data *Communities) (sql.Result, error) {
	communitiesCommunityIdKey := fmt.Sprintf("%s%v", cacheCommunitiesCommunityIdPrefix, data.CommunityId)
	communitiesCommunityNameKey := fmt.Sprintf("%s%v", cacheCommunitiesCommunityNamePrefix, data.CommunityName)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, communitiesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CommunityName, data.Introduction, data.UpdatedTime)
	}, communitiesCommunityIdKey, communitiesCommunityNameKey)
	return ret, err
}

func (m *defaultCommunitiesModel) Update(ctx context.Context, newData *Communities) error {
	data, err := m.FindOne(ctx, newData.CommunityId)
	if err != nil {
		return err
	}

	communitiesCommunityIdKey := fmt.Sprintf("%s%v", cacheCommunitiesCommunityIdPrefix, data.CommunityId)
	communitiesCommunityNameKey := fmt.Sprintf("%s%v", cacheCommunitiesCommunityNamePrefix, data.CommunityName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `community_id` = ?", m.table, communitiesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.CommunityName, newData.Introduction, newData.UpdatedTime, newData.CommunityId)
	}, communitiesCommunityIdKey, communitiesCommunityNameKey)
	return err
}

func (m *defaultCommunitiesModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCommunitiesCommunityIdPrefix, primary)
}

func (m *defaultCommunitiesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `community_id` = ? limit 1", communitiesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCommunitiesModel) tableName() string {
	return m.table
}
func (m *defaultCommunitiesModel) GetCommunityList(ctx context.Context, page int32, pageSize int32) ([]*Communities, error) {
	var resp []*Communities
	offset := (page - 1) * pageSize // 计算偏移量
	
	query := fmt.Sprintf("select %s from %s order by community_id DESC limit ? offset ?", 
		communitiesRows, m.table)
		
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, pageSize, offset)
	
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// 带条件的计数方法
func (m *defaultCommunitiesModel) CountWithCondition(ctx context.Context, whereClause string, args ...interface{}) (int64, error) {
    var total int64
    query := fmt.Sprintf("select count(*) from %s", m.table)
    
    // 如果有where条件就添加
    if whereClause != "" {
        query = fmt.Sprintf("%s where %s", query, whereClause)
    }
    
    err := m.QueryRowNoCacheCtx(ctx, &total, query, args...)
    switch err {
    case nil:
        return total, nil
    case sqlc.ErrNotFound:
        return 0, ErrNotFound
    default:
        return 0, err
    }
}

func (m *defaultCommunitiesModel) Count(ctx context.Context) (int64, error) {
    var total int64
    query := fmt.Sprintf("select count(*) from %s", m.table)
    
    err := m.QueryRowNoCacheCtx(ctx, &total, query)
    switch err {
    case nil:
        return total, nil
    case sqlc.ErrNotFound:
        return 0, ErrNotFound
    default:
        return 0, err
    }
}