// Code generated by goctl. DO NOT EDIT.
// Source: vote.proto

package voteservice

import (
	"context"

	"forum/tmp/app/vote/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetUserVoteRequest     = pb.GetUserVoteRequest
	GetUserVoteResponse    = pb.GetUserVoteResponse
	GetVoteCountRequest    = pb.GetVoteCountRequest
	GetVoteCountResponse   = pb.GetVoteCountResponse
	RemoveUserVoteRequest  = pb.RemoveUserVoteRequest
	RemoveUserVoteResponse = pb.RemoveUserVoteResponse
	UpdateUserVoteRequest  = pb.UpdateUserVoteRequest
	UpdateUserVoteResponse = pb.UpdateUserVoteResponse
	VoteCount              = pb.VoteCount
	VotePostRequest        = pb.VotePostRequest
	VotePostResponse       = pb.VotePostResponse
	VoteRecord             = pb.VoteRecord

	VoteService interface {
		VotePost(ctx context.Context, in *VotePostRequest, opts ...grpc.CallOption) (*VotePostResponse, error)
		UpdateUserVote(ctx context.Context, in *UpdateUserVoteRequest, opts ...grpc.CallOption) (*UpdateUserVoteResponse, error)
		RemoveUserVote(ctx context.Context, in *RemoveUserVoteRequest, opts ...grpc.CallOption) (*RemoveUserVoteResponse, error)
		GetVoteCount(ctx context.Context, in *GetVoteCountRequest, opts ...grpc.CallOption) (*GetVoteCountResponse, error)
		GetUserVote(ctx context.Context, in *GetUserVoteRequest, opts ...grpc.CallOption) (*GetUserVoteResponse, error)
	}

	defaultVoteService struct {
		cli zrpc.Client
	}
)

func NewVoteService(cli zrpc.Client) VoteService {
	return &defaultVoteService{
		cli: cli,
	}
}

func (m *defaultVoteService) VotePost(ctx context.Context, in *VotePostRequest, opts ...grpc.CallOption) (*VotePostResponse, error) {
	client := pb.NewVoteServiceClient(m.cli.Conn())
	return client.VotePost(ctx, in, opts...)
}

func (m *defaultVoteService) UpdateUserVote(ctx context.Context, in *UpdateUserVoteRequest, opts ...grpc.CallOption) (*UpdateUserVoteResponse, error) {
	client := pb.NewVoteServiceClient(m.cli.Conn())
	return client.UpdateUserVote(ctx, in, opts...)
}

func (m *defaultVoteService) RemoveUserVote(ctx context.Context, in *RemoveUserVoteRequest, opts ...grpc.CallOption) (*RemoveUserVoteResponse, error) {
	client := pb.NewVoteServiceClient(m.cli.Conn())
	return client.RemoveUserVote(ctx, in, opts...)
}

func (m *defaultVoteService) GetVoteCount(ctx context.Context, in *GetVoteCountRequest, opts ...grpc.CallOption) (*GetVoteCountResponse, error) {
	client := pb.NewVoteServiceClient(m.cli.Conn())
	return client.GetVoteCount(ctx, in, opts...)
}

func (m *defaultVoteService) GetUserVote(ctx context.Context, in *GetUserVoteRequest, opts ...grpc.CallOption) (*GetUserVoteResponse, error) {
	client := pb.NewVoteServiceClient(m.cli.Conn())
	return client.GetUserVote(ctx, in, opts...)
}
