// Code generated by goctl. DO NOT EDIT.
// Source: vote.proto

package voteservice

import (
	"context"
	"forum/app/vote/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetUserVoteRequest  = pb.GetUserVoteRequest
	GetUserVoteResponse = pb.GetUserVoteResponse
	VotePostRequest     = pb.VotePostRequest
	VotePostResponse    = pb.VotePostResponse

	GetPostVoteCountsRequest  = pb.GetPostVoteCountsRequest
	GetPostVoteCountsResponse = pb.GetPostVoteCountsResponse

	VoteService interface {
		VotePost(ctx context.Context, in *VotePostRequest, opts ...grpc.CallOption) (*VotePostResponse, error)
		GetUserVote(ctx context.Context, in *GetUserVoteRequest, opts ...grpc.CallOption) (*GetUserVoteResponse, error)
		GetPostVoteCounts(ctx context.Context, in *GetPostVoteCountsRequest, opts ...grpc.CallOption) (*GetPostVoteCountsResponse, error)
	}

	defaultVoteService struct {
		cli zrpc.Client
	}
)

func NewVoteService(cli zrpc.Client) VoteService {
	return &defaultVoteService{
		cli: cli,
	}
}

func (m *defaultVoteService) VotePost(ctx context.Context, in *VotePostRequest, opts ...grpc.CallOption) (*VotePostResponse, error) {
	client := pb.NewVoteServiceClient(m.cli.Conn())
	return client.VotePost(ctx, in, opts...)
}

func (m *defaultVoteService) GetUserVote(ctx context.Context, in *GetUserVoteRequest, opts ...grpc.CallOption) (*GetUserVoteResponse, error) {
	client := pb.NewVoteServiceClient(m.cli.Conn())
	return client.GetUserVote(ctx, in, opts...)
}
func (m *defaultVoteService) GetPostVoteCounts(ctx context.Context, in *GetPostVoteCountsRequest, opts ...grpc.CallOption) (*GetPostVoteCountsResponse, error) {
	client := pb.NewVoteServiceClient(m.cli.Conn())
	return client.GetPostVoteCounts(ctx, in, opts...)
}
