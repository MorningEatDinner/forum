// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	voteCountFieldNames          = builder.RawFieldNames(&VoteCount{})
	voteCountRows                = strings.Join(voteCountFieldNames, ",")
	voteCountRowsExpectAutoSet   = strings.Join(stringx.Remove(voteCountFieldNames, "`vote_count_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	voteCountRowsWithPlaceHolder = strings.Join(stringx.Remove(voteCountFieldNames, "`vote_count_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheVoteCountVoteCountIdPrefix = "cache:voteCount:voteCountId:"
	cacheVoteCountPostIdPrefix      = "cache:voteCount:postId:"
)

type (
	voteCountModel interface {
		Insert(ctx context.Context, data *VoteCount) (sql.Result, error)
		FindOne(ctx context.Context, voteCountId int64) (*VoteCount, error)
		FindOneByPostId(ctx context.Context, postId uint64) (*VoteCount, error)
		Update(ctx context.Context, data *VoteCount) error
		Delete(ctx context.Context, voteCountId int64) error
		IncrementAgreeCount(ctx context.Context, voteCountId int64) error
		DecrementAgreeCount(ctx context.Context, voteCountId int64) error  
		IncrementOpposeCount(ctx context.Context, voteCountId int64) error
		DecrementOpposeCount(ctx context.Context, voteCountId int64) error
	}

	defaultVoteCountModel struct {
		sqlc.CachedConn
		table string
	}

	VoteCount struct {
		VoteCountId int64     `db:"vote_count_id"` // 投票计数ID
		PostId      uint64    `db:"post_id"`       // 帖子
		AgreeCount  int64     `db:"agree_count"`   // 赞成票数
		OpposeCount int64     `db:"oppose_count"`  // 反对票数
		CreateTime  time.Time `db:"create_time"`   // 创建时间
		UpdatedTime time.Time `db:"updated_time"`  // 更新时间
	}
)

func newVoteCountModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultVoteCountModel {
	return &defaultVoteCountModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`vote_count`",
	}
}

func (m *defaultVoteCountModel) Delete(ctx context.Context, voteCountId int64) error {
	data, err := m.FindOne(ctx, voteCountId)
	if err != nil {
		return err
	}

	voteCountPostIdKey := fmt.Sprintf("%s%v", cacheVoteCountPostIdPrefix, data.PostId)
	voteCountVoteCountIdKey := fmt.Sprintf("%s%v", cacheVoteCountVoteCountIdPrefix, voteCountId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `vote_count_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, voteCountId)
	}, voteCountPostIdKey, voteCountVoteCountIdKey)
	return err
}

func (m *defaultVoteCountModel) FindOne(ctx context.Context, voteCountId int64) (*VoteCount, error) {
	voteCountVoteCountIdKey := fmt.Sprintf("%s%v", cacheVoteCountVoteCountIdPrefix, voteCountId)
	var resp VoteCount
	err := m.QueryRowCtx(ctx, &resp, voteCountVoteCountIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `vote_count_id` = ? limit 1", voteCountRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, voteCountId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVoteCountModel) FindOneByPostId(ctx context.Context, postId uint64) (*VoteCount, error) {
	voteCountPostIdKey := fmt.Sprintf("%s%v", cacheVoteCountPostIdPrefix, postId)
	var resp VoteCount
	err := m.QueryRowIndexCtx(ctx, &resp, voteCountPostIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `post_id` = ? limit 1", voteCountRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, postId); err != nil {
			return nil, err
		}
		return resp.VoteCountId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVoteCountModel) Insert(ctx context.Context, data *VoteCount) (sql.Result, error) {
	voteCountPostIdKey := fmt.Sprintf("%s%v", cacheVoteCountPostIdPrefix, data.PostId)
	voteCountVoteCountIdKey := fmt.Sprintf("%s%v", cacheVoteCountVoteCountIdPrefix, data.VoteCountId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, voteCountRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.PostId, data.AgreeCount, data.OpposeCount, data.UpdatedTime)
	}, voteCountPostIdKey, voteCountVoteCountIdKey)
	return ret, err
}

func (m *defaultVoteCountModel) Update(ctx context.Context, newData *VoteCount) error {
	data, err := m.FindOne(ctx, newData.VoteCountId)
	if err != nil {
		return err
	}

	voteCountPostIdKey := fmt.Sprintf("%s%v", cacheVoteCountPostIdPrefix, data.PostId)
	voteCountVoteCountIdKey := fmt.Sprintf("%s%v", cacheVoteCountVoteCountIdPrefix, data.VoteCountId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `vote_count_id` = ?", m.table, voteCountRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.PostId, newData.AgreeCount, newData.OpposeCount, newData.UpdatedTime, newData.VoteCountId)
	}, voteCountPostIdKey, voteCountVoteCountIdKey)
	return err
}

func (m *defaultVoteCountModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheVoteCountVoteCountIdPrefix, primary)
}

func (m *defaultVoteCountModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `vote_count_id` = ? limit 1", voteCountRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultVoteCountModel) tableName() string {
	return m.table
}


// Implementation of the new functions
func (m *defaultVoteCountModel) IncrementAgreeCount(ctx context.Context, voteCountId int64) error {
	data, err := m.FindOne(ctx, voteCountId)
	if err != nil {
		return err
	}

	voteCountPostIdKey := fmt.Sprintf("%s%v", cacheVoteCountPostIdPrefix, data.PostId)
	voteCountVoteCountIdKey := fmt.Sprintf("%s%v", cacheVoteCountVoteCountIdPrefix, voteCountId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set `agree_count` = `agree_count` + 1, `updated_time` = ? where `vote_count_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, time.Now(), voteCountId)
	}, voteCountPostIdKey, voteCountVoteCountIdKey)
	return err
}

func (m *defaultVoteCountModel) DecrementAgreeCount(ctx context.Context, voteCountId int64) error {
	data, err := m.FindOne(ctx, voteCountId)
	if err != nil {
		return err
	}

	if data.AgreeCount <= 0 {
		return nil
	}

	voteCountPostIdKey := fmt.Sprintf("%s%v", cacheVoteCountPostIdPrefix, data.PostId)
	voteCountVoteCountIdKey := fmt.Sprintf("%s%v", cacheVoteCountVoteCountIdPrefix, voteCountId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set `agree_count` = `agree_count` - 1, `updated_time` = ? where `vote_count_id` = ? and `agree_count` > 0", m.table)
		return conn.ExecCtx(ctx, query, time.Now(), voteCountId)
	}, voteCountPostIdKey, voteCountVoteCountIdKey)
	return err
}

func (m *defaultVoteCountModel) IncrementOpposeCount(ctx context.Context, voteCountId int64) error {
	data, err := m.FindOne(ctx, voteCountId)
	if err != nil {
		return err
	}

	voteCountPostIdKey := fmt.Sprintf("%s%v", cacheVoteCountPostIdPrefix, data.PostId)
	voteCountVoteCountIdKey := fmt.Sprintf("%s%v", cacheVoteCountVoteCountIdPrefix, voteCountId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set `oppose_count` = `oppose_count` + 1, `updated_time` = ? where `vote_count_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, time.Now(), voteCountId)
	}, voteCountPostIdKey, voteCountVoteCountIdKey)
	return err
}

func (m *defaultVoteCountModel) DecrementOpposeCount(ctx context.Context, voteCountId int64) error {
	data, err := m.FindOne(ctx, voteCountId)
	if err != nil {
		return err
	}

	if data.OpposeCount <= 0 {
		return nil
	}

	voteCountPostIdKey := fmt.Sprintf("%s%v", cacheVoteCountPostIdPrefix, data.PostId)
	voteCountVoteCountIdKey := fmt.Sprintf("%s%v", cacheVoteCountVoteCountIdPrefix, voteCountId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set `oppose_count` = `oppose_count` - 1, `updated_time` = ? where `vote_count_id` = ? and `oppose_count` > 0", m.table)
		return conn.ExecCtx(ctx, query, time.Now(), voteCountId)
	}, voteCountPostIdKey, voteCountVoteCountIdKey)
	return err
}